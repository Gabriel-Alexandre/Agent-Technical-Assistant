"""
API de Coleta de Dados do SofaScore
FastAPI para an√°lise t√©cnica de futebol em tempo real
"""

# Configura√ß√£o do Event Loop para Windows (deve estar antes de outros imports)
import sys
import asyncio
import platform

# Configurar ProactorEventLoop no Windows para compatibilidade com Playwright
if platform.system() == "Windows":
    # Definir pol√≠tica de event loop para Windows
    if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    else:
        # Para vers√µes mais antigas do Python no Windows
        loop = asyncio.ProactorEventLoop()
        asyncio.set_event_loop(loop)

import os
from datetime import datetime
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from typing import Dict, Any, List
from urllib.parse import unquote

# Importar modelos e servi√ßos
from models import (
    MatchDataRequest, 
    MatchDataResponse, 
    SimplifiedDataResponse, 
    AnalysisResponse, 
    ErrorResponse,
    LinksCollectionResponse,
    LatestLinksResponse,
    ScreenshotRequest,
    ScreenshotResponse,
    ScreenshotAnalysisRequest,
    ScreenshotAnalysisResponse,
    ScreenshotAnalysisListResponse,
    ScreenshotAnalysisDetailResponse,
    DatabaseStatsResponse,
    MatchInfoResponse,
    MatchInfoListResponse,
    MatchStatusUpdateResponse
)
from services import (
    MatchDataService, 
    SofaScoreLiveCollectorAPI, 
    SofaScoreLinksService,
    SofaScoreScreenshotService,
    MatchDataScrapingService  # Novo servi√ßo para an√°lise de dados
)
from database_service import DatabaseService

# Vari√°veis globais para servi√ßos (inicializadas no lifespan)
match_service = None
simplifier_service = None
analysis_service = None  # Agora ser√° MatchDataScrapingService
links_service = None
screenshot_service = None
database_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    global match_service, simplifier_service, analysis_service, links_service, screenshot_service, database_service
    
    print("üöÄ Inicializando servi√ßos da aplica√ß√£o...")
    
    try:
        # Inicializar DatabaseService
        print("üíæ Inicializando DatabaseService...")
        database_service = DatabaseService()
        
        # Verificar se as tabelas existem e cri√°-las se necess√°rio
        try:
            await database_service.create_tables_if_not_exist()
            print("‚úÖ DatabaseService inicializado com sucesso!")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao inicializar DatabaseService: {e}")
            print("‚ö†Ô∏è Aplica√ß√£o continuar√° sem banco de dados")
        
        # Inicializar outros servi√ßos
        print("üîß Inicializando servi√ßos principais...")
        match_service = MatchDataService()
        analysis_service = MatchDataScrapingService()  # Novo servi√ßo de scraping
        links_service = SofaScoreLinksService()
        screenshot_service = SofaScoreScreenshotService()
        
        print("‚úÖ Todos os servi√ßos inicializados com sucesso!")
        
        yield
        
    except Exception as e:
        print(f"‚ùå Erro durante inicializa√ß√£o dos servi√ßos: {e}")
        yield
    finally:
        print("üîÑ Finalizando servi√ßos...")
        # Cleanup quando a aplica√ß√£o for encerrada

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="SofaScore Football Data Collector API",
    description="""
    ## API de Coleta de Dados de FUTEBOL do SofaScore para An√°lise T√©cnica

    Esta API permite coletar dados em tempo real do SofaScore (APENAS FUTEBOL) e gerar an√°lises t√©cnicas autom√°ticas usando IA.

    ### Funcionalidades Ativas:
    - ‚öΩ **Coleta Detalhada de Partidas**: Extrai informa√ß√µes completas (times, placares, tempo, status) de partidas de futebol
    - üìã **Partidas Recentes Detalhadas**: Recupera a coleta mais recente com dados completos das partidas
    - üì∏ **Screenshots**: Captura imagens das p√°ginas de partidas
    - üîç **An√°lise Visual**: An√°lise t√©cnica baseada em screenshots

    ### ‚ö†Ô∏è Funcionalidades em Manuten√ß√£o:
    - ~~üìä **Dados Completos**: Coleta todos os dados dispon√≠veis de uma partida~~
    - ~~üéØ **Dados Simplificados**: Extrai apenas informa√ß√µes relevantes para an√°lise~~
    - ~~ü§ñ **An√°lise com IA**: Gera sugest√µes t√°ticas usando GPT-4o-mini~~
    - ~~üìã **Hist√≥rico**: Recupera hist√≥rico de coletas~~

    ### üî• EXTRA√á√ÉO INTELIGENTE DE DADOS:
    - ‚úÖ **Inclui**: Partidas de futebol com informa√ß√µes completas (times, placares, tempo)
    - ‚ùå **Exclui**: Basquete, t√™nis, v√¥lei, e-sports, etc.
    - üéØ **M√©todo**: An√°lise de elementos HTML espec√≠ficos do SofaScore
    - üìä **Dados**: Times, placares, tempo, status, torneio, URLs

    ### Como usar (Rotas Ativas):
    1. **Coletar Partidas Detalhadas**: `POST /sofascore/collect-links` - Extrai dados completos das partidas
    2. **Partidas Recentes Detalhadas**: `GET /sofascore/latest-links` - Recupera dados da √∫ltima coleta
    3. **Screenshot**: `POST /match/{match_identifier}/screenshot` - Captura imagem da partida
    4. **An√°lise Visual**: `POST /match/{match_identifier}/screenshot-analysis` - An√°lise t√©cnica
    5. **Consultar An√°lises**: `GET /match/{match_id}/screenshot-analyses` - Hist√≥rico de an√°lises

    ### Banco de Dados:
    - Todos os dados s√£o salvos no Supabase
    - Suporte a m√∫ltiplas coletas da mesma partida
    - Ideal para monitoramento em tempo real (coleta a cada 30s)
    - Identifica√ß√£o autom√°tica do esporte (football)
    
    ### Status do Sistema:
    - ‚úÖ **Screenshots e An√°lise Visual**: Totalmente funcionais
    - ‚úÖ **Filtro de Futebol**: Ativo e funcionando
    - ‚ö†Ô∏è **Coleta de Dados Diretos**: Em manuten√ß√£o tempor√°ria
    """,
    version="2.0.0",
    contact={
        "name": "Assistente T√©cnico de Futebol",
        "email": "support@example.com"
    },
    lifespan=lifespan
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/", tags=["Status"])
async def root():
    """Endpoint raiz - Status da API"""
    return {
        "message": "‚öΩ SofaScore Football Data Collector API",
        "version": "2.0.0",
        "status": "‚úÖ Online",
        "timestamp": datetime.now(),
        "sport_filter": "‚öΩ APENAS FUTEBOL",
        "active_endpoints": {
            "collect_football_links": "/sofascore/collect-links",
            "latest_football_links": "/sofascore/latest-links",
            "screenshot": "/match/{match_identifier}/screenshot",
            "screenshot_analysis": "/match/{match_identifier}/screenshot-analysis",
            "list_analyses": "/match/{match_id}/screenshot-analyses",
            "latest_analysis": "/match/{match_id}/screenshot-analysis/latest"
        },
        "disabled_endpoints": {
            "full_data": "/match/{match_id}/full-data [DESABILITADA]",
            "simplified_data": "/match/{match_id}/simplified-data [DESABILITADA]",
            "analysis": "/match/{match_id}/analysis [DESABILITADA]",
            "history": "/match/{match_id}/history [DESABILITADA]"
        },
        "system_status": {
            "detailed_match_collection": "‚úÖ Funcionais (extra√ß√£o completa de dados)",
            "latest_detailed_matches": "‚úÖ Funcionais (dados completos das partidas)",
            "screenshots": "‚úÖ Funcionais",
            "visual_analysis": "‚úÖ Funcionais", 
            "sport_filter": "‚úÖ Ativo (apenas futebol)",
            "data_extraction": "‚úÖ Melhorado (times, placares, tempo, status)",
            "database": "‚úÖ Conectado"
        },
        "extraction_features": {
            "included_sports": ["football"],
            "excluded_sports": ["basketball", "tennis", "volleyball", "esports", "others"],
            "extracted_data": ["home_team", "away_team", "home_score", "away_score", "match_time", "match_status", "tournament", "match_id", "url"],
            "extraction_method": "CSS_selectors_based_on_SofaScore_HTML_structure"
        }
    }

@app.get("/health", tags=["Status"])
async def health_check():
    """Verifica√ß√£o de sa√∫de da API"""
    try:
        # Testar conex√£o com banco
        db_connected = await database_service.test_connection()
        
        return {
            "status": "healthy" if db_connected else "degraded",
            "timestamp": datetime.now(),
            "services": {
                "database": "‚úÖ Connected" if db_connected else "‚ùå Connection failed",
                "ai_assistant": "‚úÖ Available" if match_service.assistant else "‚ö†Ô∏è Not configured"
            }
        }
    except Exception as e:
        raise HTTPException(
            status_code=503,
            detail=f"Servi√ßo indispon√≠vel: {str(e)}"
        )

@app.get("/test/database", tags=["Status"])
async def test_database_connection():
    """Teste espec√≠fico de conectividade com o Supabase"""
    try:
        # Teste de conectividade com Supabase
        connectivity_ok = await database_service.test_connection()
        
        if connectivity_ok:
            # Tentar tamb√©m buscar estat√≠sticas do banco
            try:
                stats = await database_service.get_database_stats()
                return {
                    "status": "success",
                    "message": "Conectividade com Supabase confirmada",
                    "connectivity": True,
                    "database_stats": stats,
                    "timestamp": datetime.now()
                }
            except Exception as stats_error:
                return {
                    "status": "partial",
                    "message": "Conectividade b√°sica OK, mas erro ao obter estat√≠sticas",
                    "connectivity": True,
                    "stats_error": str(stats_error),
                    "timestamp": datetime.now()
                }
        else:
            return {
                "status": "error",
                "message": "Falha na conectividade com Supabase",
                "connectivity": False,
                "timestamp": datetime.now()
            }
            
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro no teste de conectividade: {str(e)}"
        )

@app.post("/match/{match_id}/full-data", 
          response_model=MatchDataResponse,
          tags=["Rotas Desabilitadas"],
          summary="[DESABILITADA] Obter Dados Completos da Partida",
          description="""
          ‚ö†Ô∏è **ROTA TEMPORARIAMENTE DESABILITADA**
          
          Esta rota est√° temporariamente desabilitada para manuten√ß√£o.
          
          ~~Coleta todos os dados dispon√≠veis do SofaScore para uma partida espec√≠fica.~~
          
          **Status:** Desabilitada
          **Motivo:** Manuten√ß√£o do sistema
          """,
          include_in_schema=False)
async def get_full_match_data(match_id: str):
    """Endpoint 1: Obter todos os dados do SofaScore para uma partida espec√≠fica - DESABILITADO"""
    raise HTTPException(
        status_code=503,
        detail="Esta rota est√° temporariamente desabilitada para manuten√ß√£o. Use as rotas de screenshot para an√°lise de partidas."
    )
    
    # C√≥digo original comentado para manuten√ß√£o
    # try:
    #     print(f"üéØ Requisi√ß√£o para dados completos - Match ID: {match_id}")
    #     
    #     # Validar match_id
    #     if not match_id or not match_id.isdigit():
    #         raise HTTPException(
    #             status_code=400,
    #             detail="Match ID deve ser um n√∫mero v√°lido"
    #         )
    #     
    #     # Coletar dados
    #     result = await match_service.get_full_match_data(match_id)
    #     
    #     if result["success"]:
    #         return MatchDataResponse(**result)
    #     else:
    #         raise HTTPException(
    #             status_code=500,
    #             detail=result["message"]
    #         )
    # 
    # except HTTPException:
    #     raise
    # except Exception as e:
    #     raise HTTPException(
    #         status_code=500,
    #         detail=f"Erro interno: {str(e)}"
    #     )

@app.post("/match/{match_id}/simplified-data",
          response_model=SimplifiedDataResponse,
          tags=["Rotas Desabilitadas"],
          summary="[DESABILITADA] Obter Dados Simplificados da Partida",
          description="""
          ‚ö†Ô∏è **ROTA TEMPORARIAMENTE DESABILITADA**
          
          Esta rota est√° temporariamente desabilitada para manuten√ß√£o.
          
          ~~Coleta e simplifica dados da partida, extraindo apenas informa√ß√µes relevantes para an√°lise t√©cnica.~~
          
          **Status:** Desabilitada
          **Motivo:** Manuten√ß√£o do sistema
          """,
          include_in_schema=False)
async def get_simplified_match_data(match_id: str):
    """Endpoint 2: Obter dados simplificados para uma partida espec√≠fica - DESABILITADO"""
    raise HTTPException(
        status_code=503,
        detail="Esta rota est√° temporariamente desabilitada para manuten√ß√£o. Use as rotas de screenshot para an√°lise de partidas."
    )
    
    # C√≥digo original comentado para manuten√ß√£o
    # try:
    #     print(f"üéØ Requisi√ß√£o para dados simplificados - Match ID: {match_id}")
    #     
    #     # Validar match_id
    #     if not match_id or not match_id.isdigit():
    #         raise HTTPException(
    #             status_code=400,
    #             detail="Match ID deve ser um n√∫mero v√°lido"
    #         )
    #     
    #     # Processar dados
    #     result = await match_service.get_simplified_match_data(match_id)
    #     
    #     if result["success"]:
    #         return SimplifiedDataResponse(**result)
    #     else:
    #         raise HTTPException(
    #             status_code=500,
    #             detail=result["message"]
    #         )
    # 
    # except HTTPException:
    #     raise
    # except Exception as e:
    #     raise HTTPException(
    #         status_code=500,
    #         detail=f"Erro interno: {str(e)}"
    #     )

@app.post("/match/{match_id}/analysis",
          response_model=AnalysisResponse,
          tags=["Rotas Desabilitadas"],
          summary="[DESABILITADA] Obter An√°lise Completa com IA",
          description="""
          ‚ö†Ô∏è **ROTA TEMPORARIAMENTE DESABILITADA**
          
          Esta rota est√° temporariamente desabilitada para manuten√ß√£o.
          
          ~~Coleta dados da partida, simplifica e gera an√°lise t√©cnica completa usando GPT-4o-mini.~~
          
          **Status:** Desabilitada
          **Motivo:** Manuten√ß√£o do sistema
          **Alternativa:** Use `/match/{match_identifier}/screenshot-analysis` para an√°lise baseada em screenshot
          """,
          include_in_schema=False)
async def get_match_analysis(match_id: str):
    """Endpoint 3: Obter dados + sugest√£o do agente para uma partida espec√≠fica - DESABILITADO"""
    raise HTTPException(
        status_code=503,
        detail="Esta rota est√° temporariamente desabilitada para manuten√ß√£o. Use a rota /match/{match_identifier}/screenshot-analysis para an√°lise de partidas."
    )
    
    # C√≥digo original comentado para manuten√ß√£o
    # try:
    #     print(f"ü§ñ Requisi√ß√£o para an√°lise completa - Match ID: {match_id}")
    #     
    #     # Validar match_id
    #     if not match_id or not match_id.isdigit():
    #         raise HTTPException(
    #             status_code=400,
    #             detail="Match ID deve ser um n√∫mero v√°lido"
    #         )
    #     
    #     # Verificar se assistente est√° dispon√≠vel
    #     if not match_service.assistant:
    #         raise HTTPException(
    #             status_code=503,
    #             detail="Assistente t√©cnico n√£o dispon√≠vel. Configure OPENAI_API_KEY no arquivo .env"
    #         )
    #     
    #     # Gerar an√°lise completa
    #     result = await match_service.get_match_analysis(match_id)
    #     
    #     if result["success"]:
    #         return AnalysisResponse(**result)
    #     else:
    #         raise HTTPException(
    #             status_code=500,
    #             detail=result["message"]
    #         )
    # 
    # except HTTPException:
    #     raise
    # except Exception as e:
    #     raise HTTPException(
    #         status_code=500,
    #         detail=f"Erro interno: {str(e)}"
    #     )

@app.get("/match/{match_id}/history",
         tags=["Rotas Desabilitadas"],
         summary="[DESABILITADA] Hist√≥rico de Coletas da Partida",
         description="""
         ‚ö†Ô∏è **ROTA TEMPORARIAMENTE DESABILITADA**
         
         Esta rota est√° temporariamente desabilitada para manuten√ß√£o.
         
         ~~Recupera o hist√≥rico de coletas de dados de uma partida espec√≠fica~~
         
         **Status:** Desabilitada
         **Motivo:** Manuten√ß√£o do sistema
         """,
         include_in_schema=False)
async def get_match_history(match_id: str, limit: int = 10):
    """Endpoint para recuperar hist√≥rico de coletas de uma partida - DESABILITADO"""
    raise HTTPException(
        status_code=503,
        detail="Esta rota est√° temporariamente desabilitada para manuten√ß√£o."
    )
    
    # C√≥digo original comentado para manuten√ß√£o
    # try:
    #     db_service = DatabaseService()
    #     
    #     # Buscar hist√≥rico no banco
    #     history = await db_service.get_match_history(match_id, limit)
    #     
    #     return {
    #         "success": True,
    #         "match_id": match_id,
    #         "total_records": len(history),
    #         "history": history
    #     }
    #     
    # except Exception as e:
    #     raise HTTPException(
    #         status_code=500,
    #         detail=f"Erro ao buscar hist√≥rico: {str(e)}"
    #     )

@app.post("/sofascore/collect-links", response_model=LinksCollectionResponse)
async def collect_links():
    """
    üîó **Coleta Links da Homepage do SofaScore com Detalhes de Partidas**
    
    **FUNCIONALIDADE PRINCIPAL:**
    - Acessa a homepage do SofaScore (https://www.sofascore.com/)
    - Extrai informa√ß√µes detalhadas de partidas de FUTEBOL em tempo real
    - Identifica automaticamente diferentes estados das partidas
    - Ignora partidas sem informa√ß√µes v√°lidas de times
    
    **INFORMA√á√ïES EXTRA√çDAS POR PARTIDA:**
    - ‚öΩ **Times**: Nome do time da casa e visitante
    - üèÜ **Placares**: Gols de cada time (ou status especial)
    - ‚è∞ **Tempo**: Hor√°rio de in√≠cio, minuto atual, ou tempo da partida
    - üìä **Status**: Estado atual da partida
    - üîó **URL**: Link direto para a partida no SofaScore
    
    **ESTADOS DE PARTIDA SUPORTADOS:**
    - üî¥ **in_progress**: Partida em andamento (mostra minuto atual e placar)
    - ‚è≥ **not_started**: Partida n√£o iniciada (placares 0-0)
    - ‚úÖ **finished**: Partida finalizada (placar final)
    - ‚è∏Ô∏è **postponed**: Partida adiada
    
    **MELHORIAS IMPLEMENTADAS:**
    - ‚úÖ M√∫ltiplos seletores CSS para diferentes tipos de partida
    - ‚úÖ L√≥gica robusta para partidas finalizadas baseada em exemplos reais
    - ‚úÖ Valida√ß√£o cr√≠tica: ignora partidas sem nomes de times
    - ‚úÖ Extra√ß√£o otimizada de placares para jogos finalizados
    - ‚úÖ Logs limpos e informativos
    
    **RETORNO:**
    - Lista de partidas com informa√ß√µes detalhadas
    - Estat√≠sticas da coleta
    - Exemplos das partidas encontradas
    - ID do registro salvo no banco de dados
    
    **EXEMPLO DE PARTIDA RETORNADA:**
    ```json
    {
        "home_team": "Derry City",
        "away_team": "Galway Utd", 
        "home_score": "1",
        "away_score": "1",
        "match_time": "15:45",
        "match_status": "finished",
        "url": "https://www.sofascore.com/pt/football/match/..."
    }
    ```
    
    **OBSERVA√á√ïES:**
    - Foco exclusivo em partidas de futebol
    - Dados coletados em tempo real da homepage
    - Partidas inv√°lidas s√£o automaticamente filtradas
    - Sistema otimizado para diferentes layouts do SofaScore
    """
    try:
        print("üöÄ [COLLECT-LINKS] Iniciando rota /sofascore/collect-links")
        print(f"üîç [COLLECT-LINKS] Timestamp: {datetime.now()}")
        print(f"üîß [COLLECT-LINKS] Verificando se links_service est√° inicializado: {links_service is not None}")
        
        if links_service is None:
            print("‚ùå [COLLECT-LINKS] ERRO: links_service n√£o foi inicializado!")
            raise HTTPException(
                status_code=500,
                detail="Servi√ßo de coleta de links n√£o foi inicializado corretamente"
            )
        
        print("‚öΩ [COLLECT-LINKS] Iniciando coleta DETALHADA de partidas de FUTEBOL do SofaScore...")
        
        # Coletar informa√ß√µes detalhadas das partidas (apenas futebol)
        print("üîÑ [COLLECT-LINKS] Chamando links_service.collect_and_filter_links()...")
        result = await links_service.collect_and_filter_links()
        
        print(f"‚úÖ [COLLECT-LINKS] Resultado recebido: success={result.get('success', 'N/A')}")
        
        if result["success"]:
            print(f"üéâ [COLLECT-LINKS] Coleta bem-sucedida! Retornando resposta...")
            return LinksCollectionResponse(**result)
        else:
            print(f"‚ùå [COLLECT-LINKS] Coleta falhou: {result.get('message', 'Erro desconhecido')}")
            raise HTTPException(
                status_code=500,
                detail=result["message"]
            )
    
    except HTTPException as he:
        print(f"‚ö†Ô∏è [COLLECT-LINKS] HTTPException capturada: {he.detail}")
        raise
    except Exception as e:
        print(f"üí• [COLLECT-LINKS] Exce√ß√£o n√£o tratada: {type(e).__name__}: {str(e)}")
        import traceback
        print(f"üìã [COLLECT-LINKS] Traceback completo:\n{traceback.format_exc()}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno na coleta detalhada de partidas de futebol: {str(e)}"
        )

@app.get("/sofascore/latest-links",
         response_model=LatestLinksResponse,
         tags=["Coleta de Links"],
         summary="Obter Coleta de Links de FUTEBOL Mais Recente",
         description="""
         Retorna a coleta de partidas de FUTEBOL mais recente com informa√ß√µes DETALHADAS.
         
         **Retorna Informa√ß√µes Completas:**
         - üìä **Partidas detalhadas** da coleta mais recente
         - üïê **Informa√ß√µes em tempo real** (times, placares, tempo)
         - üìà **Estat√≠sticas da coleta** (total, match IDs √∫nicos, etc.)
         - üéØ **Amostra das primeiras partidas** para visualiza√ß√£o r√°pida
         
         **Dados Detalhados Inclu√≠dos:**
         - `detailed_matches`: Lista completa de partidas com:
           - Nomes dos times (casa e visitante)
           - Placar atual de cada time
           - Tempo da partida (hor√°rio ou minuto)
           - Status da partida (n√£o iniciada, em andamento, etc.)
           - Torneio/competi√ß√£o
           - Match ID e URLs completas
         - `collection_info`: Metadados da coleta (timestamp, m√©todo, etc.)
         - `statistics`: Estat√≠sticas da coleta (total de partidas, etc.)
         
         **Exemplo de Dados Retornados:**
         ```json
         {
           "detailed_matches": [
             {
               "home_team": "Paysandu",
               "away_team": "Botafogo-SP", 
               "home_score": "1",
               "away_score": "0",
               "match_time": "45'",
               "match_status": "in_progress",
               "tournament": "S√©rie B",
               "match_id": "13616175",
               "url": "https://www.sofascore.com/pt/football/match/..."
             }
           ]
         }
         ```
         
         **Uso recomendado:** Verificar partidas em andamento sem executar nova coleta.
         """)
async def get_latest_sofascore_links():
    """Rota GET: Buscar a coleta de partidas de FUTEBOL mais recente com informa√ß√µes detalhadas do banco de dados"""
    try:
        print("‚öΩ Buscando coleta DETALHADA de partidas de FUTEBOL mais recente...")
        
        # Buscar coleta mais recente com dados detalhados (apenas futebol)
        result = await links_service.get_latest_links_collection()
        
        if result["success"]:
            return LatestLinksResponse(**result)
        else:
            raise HTTPException(
                status_code=404 if "Nenhuma coleta" in result["message"] else 500,
                detail=result["message"]
            )
    
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno ao buscar coleta detalhada de futebol mais recente: {str(e)}"
        )

@app.post("/match/{match_identifier:path}/screenshot",
          response_model=ScreenshotResponse,
          tags=["Screenshots"],
          summary="Capturar Screenshot de Partida",
          description="""
          Captura screenshot da p√°gina completa de uma partida espec√≠fica do SofaScore.
          
          **Par√¢metros aceitos:**
          - Match ID (8 d√≠gitos): `13970328`
          - URL completa: `https://www.sofascore.com/pt/football/match/...`
          - Slug da partida: `slovakia-u21-spain-u21/QXbscwc#id:13197555`
          
          **Processo:**
          1. Constr√≥i a URL da partida baseada no identificador
          2. Acessa a p√°gina da partida
          3. Captura screenshot da p√°gina completa
          4. Salva o arquivo na pasta `screenshots/`
          5. Registra log da partida no banco de dados
          
          **Dados salvos no banco:**
          - Informa√ß√µes da partida (times, URL, match_id)
          - Detalhes do screenshot (nome do arquivo, tamanho)
          - Status da captura
          
          **Modo:** Single (p√°gina completa)
          
          **Exemplo de uso:**
          - `/match/slovakia-u21-spain-u21/QXbscwc#id:13197555/screenshot`
          - `/match/13197555/screenshot`
          """)
async def take_match_screenshot(match_identifier: str):
    """Rota 2: Tirar screenshot de uma partida e salvar log no Supabase"""
    try:
        print(f"üì∏ Iniciando captura de screenshot para: {match_identifier}")
        
        # Capturar screenshot
        result = await screenshot_service.take_match_screenshot(match_identifier)
        
        if result["success"]:
            return ScreenshotResponse(**result)
        else:
            raise HTTPException(
                status_code=500,
                detail=result["message"]
            )
    
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno na captura de screenshot: {str(e)}"
        )

@app.post("/match/{match_identifier:path}/screenshot-analysis",
          response_model=ScreenshotAnalysisResponse,
          tags=["An√°lise de Partidas"],
          summary="An√°lise T√©cnica a partir de Dados da Partida",
          description="""
          Acessa a p√°gina da partida, extrai dados em tempo real e gera an√°lise t√©cnica especializada.
          
          **Processo completo:**
          1. Acessa a p√°gina da partida no SofaScore
          2. Extrai dados estruturados (estat√≠sticas, eventos, placar)
          3. Filtra informa√ß√µes relevantes para an√°lise t√©cnica
          4. Gera an√°lise t√©cnica especializada considerando:
             - Situa√ß√£o atual da partida
             - Estat√≠sticas em tempo real
             - Eventos importantes
             - Recomenda√ß√µes t√©cnicas diretas
             - Justificativas baseadas em dados
          
          **An√°lise inclui:**
          - üìä Dados atuais da partida (placar, tempo, status)
          - üìà Estat√≠sticas detalhadas (posse, finaliza√ß√µes, passes, etc.)
          - ‚öΩ Eventos importantes (cart√µes, faltas, grandes chances)
          - üéØ Recomenda√ß√µes espec√≠ficas para cada time
          - ‚ö†Ô∏è An√°lise baseada em dados reais extra√≠dos
          
          **Vantagens:**
          - An√°lise baseada em dados precisos e atualizados
          - Recomenda√ß√µes diretas e justificadas
          - Processamento r√°pido sem armazenamento intermedi√°rio
          - Informa√ß√µes extra√≠das diretamente da fonte
          
          **Requisitos:** 
          - Playwright funcionando para acesso √† p√°gina
          - Partida ativa ou recente no SofaScore
          
          **Nota:** Esta an√°lise √© baseada em dados reais extra√≠dos da p√°gina da partida no momento da consulta.
          """)
async def analyze_match_from_scraping(match_identifier: str):
    """An√°lise t√©cnica da partida baseada em scrapping de dados em tempo real"""
    try:
        print(f"ü§ñ Iniciando an√°lise t√©cnica via scrapping para: {match_identifier}")
        
        # Gerar an√°lise a partir dos dados extra√≠dos
        result = await analysis_service.analyze_match_from_scraping(match_identifier)
        
        if result["success"]:
            return ScreenshotAnalysisResponse(**result)
        else:
            raise HTTPException(
                status_code=500,
                detail=result["message"]
            )
    
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno na an√°lise de dados: {str(e)}"
        )

# Rotas para consultar an√°lises de dados
@app.get("/match/{match_id}/screenshot-analyses",
         response_model=ScreenshotAnalysisListResponse,
         tags=["An√°lise de Partidas"],
         summary="Listar An√°lises de Dados de uma Partida",
         description="""
         Recupera todas as an√°lises baseadas em dados realizadas para uma partida espec√≠fica.
         
         **Retorna:**
         - Lista de an√°lises ordenadas por data (mais recente primeiro)
         - Informa√ß√µes b√°sicas de cada an√°lise
         - Metadados da an√°lise (estat√≠sticas extra√≠das, eventos)
         - Timestamps de cria√ß√£o
         
         **Par√¢metros:**
         - match_id: ID da partida (8 d√≠gitos)
         - limit: N√∫mero m√°ximo de an√°lises a retornar (padr√£o: 10)
         """)
async def get_match_data_analyses(match_id: str, limit: int = 10):
    """Recupera an√°lises de dados de uma partida espec√≠fica"""
    try:
        database = DatabaseService()
        analyses = await database.get_screenshot_analysis(match_id, limit)
        
        return ScreenshotAnalysisListResponse(
            success=True,
            message=f"Encontradas {len(analyses)} an√°lise(s) de dados para a partida {match_id}",
            data=analyses,
            total_analyses=len(analyses),
            timestamp=datetime.now()
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao buscar an√°lises: {str(e)}"
        )

@app.get("/match/{match_id}/screenshot-analysis/latest",
         response_model=ScreenshotAnalysisDetailResponse,
         tags=["An√°lise de Partidas"],
         summary="Obter An√°lise de Dados Mais Recente",
         description="""
         Recupera a an√°lise baseada em dados mais recente de uma partida espec√≠fica.
         
         **Retorna:**
         - An√°lise completa mais recente
         - Texto da an√°lise t√©cnica
         - Informa√ß√µes da partida
         - Metadados da an√°lise (estat√≠sticas, eventos)
         """)
async def get_latest_data_analysis(match_id: str):
    """Recupera a an√°lise de dados mais recente de uma partida"""
    try:
        database = DatabaseService()
        analysis = await database.get_latest_screenshot_analysis(match_id)
        
        if not analysis:
            raise HTTPException(
                status_code=404,
                detail=f"Nenhuma an√°lise de dados encontrada para a partida {match_id}"
            )
        
        return ScreenshotAnalysisDetailResponse(
            success=True,
            message="An√°lise de dados mais recente recuperada com sucesso",
            analysis_data=analysis,
            match_info={
                "match_id": analysis.get("match_id"),
                "home_team": analysis.get("home_team"),
                "away_team": analysis.get("away_team"),
                "match_url": analysis.get("match_url")
            },
            timestamp=datetime.now()
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao buscar an√°lise mais recente: {str(e)}"
        )

@app.get("/screenshot-analyses",
         response_model=ScreenshotAnalysisListResponse,
         tags=["An√°lise de Partidas"],
         summary="Listar Todas as An√°lises de Dados",
         description="""
         Recupera todas as an√°lises baseadas em dados realizadas no sistema.
         
         **Retorna:**
         - Lista de todas as an√°lises ordenadas por data
         - Informa√ß√µes b√°sicas de cada an√°lise
         - Tipos de an√°lise (data_scraping_analysis)
         - Pagina√ß√£o com limite configur√°vel
         """)
async def get_all_data_analyses(limit: int = 50):
    """Recupera todas as an√°lises de dados do sistema"""
    try:
        database = DatabaseService()
        analyses = await database.get_all_screenshot_analyses(limit)
        
        return ScreenshotAnalysisListResponse(
            success=True,
            message=f"Encontradas {len(analyses)} an√°lise(s) de dados no sistema",
            data=analyses,
            total_analyses=len(analyses),
            timestamp=datetime.now()
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao buscar an√°lises: {str(e)}"
        )

# Handler de erros global
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Handler global de exce√ß√µes"""
    print(f"‚ùå Erro n√£o tratado: {exc}")
    return JSONResponse(
        status_code=500,
        content=ErrorResponse(
            message="Erro interno do servidor",
            error_details=str(exc),
            timestamp=datetime.now()
        ).model_dump()
    )

if __name__ == "__main__":
    import uvicorn
    
    print("üöÄ Iniciando servidor de desenvolvimento...")
    
    # Configurar servidor com pol√≠tica de loop adequada
    if platform.system() == "Windows":
        print("ü™ü Sistema Windows detectado - usando ProactorEventLoop para compatibilidade com Playwright")
        
        # Para desenvolvimento com reload no Windows
        class ProactorServer(uvicorn.Server):
            def run(self, sockets=None):
                # Garantir que o ProactorEventLoop est√° configurado
                if hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
                    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
                loop = asyncio.ProactorEventLoop()
                asyncio.set_event_loop(loop)
                asyncio.run(self.serve(sockets=sockets))
        
        config = uvicorn.Config(
            app="main:app",
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="info"
        )
        server = ProactorServer(config=config)
        server.run()
    else:
        # Para Linux/Mac, usar configura√ß√£o padr√£o
        print("üêß Sistema Unix/Linux detectado - usando configura√ß√£o padr√£o")
        uvicorn.run(
            "main:app",
            host="0.0.0.0",
            port=8000,
            reload=True,
            log_level="info"
        )
