# agent-assistant.py
"""
Assistente T√©cnico de Futebol Especializado
Analisa dados simplificados e fornece sugest√µes t√°ticas precisas usando GPT-4o-mini
"""

import json
import sys
import os
from pathlib import Path
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

class TechnicalAssistant:
    """Assistente T√©cnico Especializado em An√°lise T√°tica"""
    
    def __init__(self):
        # Inicializar cliente OpenAI
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("‚ùå OPENAI_API_KEY n√£o encontrada no arquivo .env")
        
        self.client = OpenAI(api_key=api_key)
        self.model = "gpt-4o-mini"
        
    def load_match_data(self, json_file_path):
        """Carrega dados simplificados da partida"""
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå Erro ao carregar dados: {e}")
            return None
    
    def create_tactical_prompt(self, match_data):
        """Cria prompt especializado para an√°lise t√°tica"""
        
        # Converter dados para texto estruturado
        match_json = json.dumps(match_data, indent=2, ensure_ascii=False)
        
        prompt = f"""
# ASSISTENTE T√âCNICO ESPECIALIZADO EM FUTEBOL

## PERFIL DO ESPECIALISTA
Voc√™ √© um **Assistente T√©cnico de Elite** com 20+ anos de experi√™ncia em an√°lise t√°tica, tendo trabalhado com clubes profissionais. Seu conhecimento inclui:

- **Sistemas T√°ticos**: 4-3-3, 4-2-3-1, 3-5-2, 5-3-2, forma√ß√µes h√≠bridas
- **Transi√ß√µes**: Pressing, contra-pressing, transi√ß√µes r√°pidas
- **An√°lise de Vulnerabilidades**: Espa√ßos entre linhas, sobrecarga de flancos
- **Gest√£o de Jogo**: Controle de ritmo, gest√£o de vantagem/desvantagem
- **Psicologia T√°tica**: Press√£o, momentum, gest√£o emocional

## DADOS DA PARTIDA
```json
{match_json}
```

## CRIT√âRIOS DE AN√ÅLISE RIGOROSOS

### ‚ö†Ô∏è IMPORTANTE: SEJA SELETIVO
- **N√ÉO sugira** mudan√ßas √≥bvias ou desnecess√°rias
- **FOQUE** apenas em pontos cr√≠ticos que podem mudar o resultado
- **BASEIE** todas sugest√µes em dados concretos
- **PRIORIZE** ajustes que podem ser implementados rapidamente

### üîç AN√ÅLISE T√âCNICA OBRIGAT√ìRIA

#### 1. AN√ÅLISE SITUACIONAL
- Como est√° o **momentum** da partida?
- Qual time est√° **dominando taticamente**?
- H√° **padr√µes de vulnerabilidade** claros?

#### 2. AN√ÅLISE ESTAT√çSTICA PROFUNDA
- **Efici√™ncia vs Posse**: Qual time √© mais efetivo?
- **Zonas de Press√£o**: Onde cada time est√° sendo pressionado?
- **Padr√µes de Finaliza√ß√£o**: Qualidade das chances criadas
- **Solidez Defensiva**: Efetividade nos duelos e tackles

#### 3. AN√ÅLISE T√ÅTICA ESPEC√çFICA
- **Problemas Estruturais**: Gaps na forma√ß√£o, desbalanceamento
- **Aproveitamento de Flancos**: Efetividade dos cruzamentos
- **Transi√ß√µes**: Velocidade e efetividade nas mudan√ßas de posse
- **Bolas Paradas**: Oportunidades desperdi√ßadas ou vulnerabilidades

#### 4. GEST√ÉO DE JOGO
- **Ritmo de Jogo**: Muito r√°pido/lento para a situa√ß√£o?
- **Gest√£o de Cart√µes**: Jogadores em risco
- **Substitui√ß√µes**: Timing e impacto t√°tico

## FORMATO DE RESPOSTA OBRIGAT√ìRIO

### üìä SITUA√á√ÉO T√ÅTICA ATUAL
[Resumo em 2-3 frases sobre o dom√≠nio t√°tico atual]

### üîç AN√ÅLISE CR√çTICA (m√°ximo 4 pontos)
1. **[CATEGORIA]**: An√°lise espec√≠fica com dados
2. **[CATEGORIA]**: An√°lise espec√≠fica com dados
3. **[CATEGORIA]**: An√°lise espec√≠fica com dados
4. **[CATEGORIA]**: An√°lise espec√≠fica com dados

### ‚ö° SUGEST√ïES T√ÅTICAS PRIORIT√ÅRIAS

#### üè† Para Racing de Santander:
**[URGENTE/M√âDIA/BAIXA]** - Sugest√£o espec√≠fica com justificativa

#### üöå Para Mirand√©s:
**[URGENTE/M√âDIA/BAIXA]** - Sugest√£o espec√≠fica com justificativa

### üö® ALERTAS CR√çTICOS
- Riscos iminentes que precisam aten√ß√£o imediata
- Oportunidades t√°ticas sendo desperdi√ßadas

### üìà PREVIS√ÉO T√ÅTICA
[Como o jogo pode evoluir taticamente nos pr√≥ximos 15-20 minutos]

## REGRAS DE OURO

‚úÖ **SEMPRE**:
- Use nomes espec√≠ficos de jogadores
- Cite n√∫meros exatos das estat√≠sticas
- Explique o "porqu√™" t√°tico de cada sugest√£o
- Seja preciso sobre posicionamento e timing

‚ùå **NUNCA**:
- Sugira mudan√ßas gen√©ricas ("melhorar o ataque")
- Ignore o contexto do placar e tempo de jogo
- Proponha altera√ß√µes complexas demais
- Seja superficial nas an√°lises

---

## AN√ÅLISE: Forne√ßa sua avalia√ß√£o t√©cnica seguindo EXATAMENTE este formato."""

        return prompt
    
    def analyze_match(self, match_data):
        """Realiza an√°lise t√°tica usando GPT-4o-mini"""
        try:
            print("ü§ñ Iniciando an√°lise t√°tica especializada...")
            
            # Criar prompt especializado
            prompt = self.create_tactical_prompt(match_data)
            
            # Fazer chamada para GPT-4o-mini
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": "Voc√™ √© um assistente t√©cnico de futebol especializado com vasta experi√™ncia em an√°lise t√°tica profissional."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                temperature=0.3,  # Baixa temperatura para an√°lises mais precisas
                max_tokens=2000,
                top_p=0.9
            )
            
            analysis = response.choices[0].message.content
            
            print("‚úÖ An√°lise conclu√≠da!")
            return analysis
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise: {e}")
            return None
    
    def analyze_match_with_prompt(self, custom_prompt):
        """Realiza an√°lise t√°tica usando prompt personalizado"""
        try:
            print("ü§ñ Iniciando an√°lise t√°tica com prompt personalizado...")
            
            # Fazer chamada para GPT-4o-mini com prompt personalizado
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": "Voc√™ √© um especialista em an√°lise t√°tica de futebol com 20 anos de experi√™ncia. Forne√ßa an√°lises diretas, pr√°ticas e espec√≠ficas baseadas nos dados fornecidos."
                    },
                    {
                        "role": "user", 
                        "content": custom_prompt
                    }
                ],
                temperature=0.2,  # Temperatura ainda mais baixa para an√°lises diretas
                max_tokens=1500,
                top_p=0.8
            )
            
            analysis = response.choices[0].message.content
            
            print("‚úÖ An√°lise personalizada conclu√≠da!")
            return analysis
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise personalizada: {e}")
            return None
    
    def analyze_image_with_prompt(self, custom_prompt, image_base64):
        """Realiza an√°lise t√°tica visual usando imagem"""
        try:
            print("ü§ñ Iniciando an√°lise t√°tica visual com imagem...")
            
            # Fazer chamada para GPT-4o-mini com an√°lise de imagem
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",  # Modelo que suporta vis√£o
                messages=[
                    {
                        "role": "system", 
                        "content": "Voc√™ √© um especialista em an√°lise t√°tica de futebol com 20 anos de experi√™ncia. Analise a imagem fornecida e forne√ßa an√°lises diretas, pr√°ticas e espec√≠ficas baseadas no que consegue ver."
                    },
                    {
                        "role": "user", 
                        "content": [
                            {
                                "type": "text",
                                "text": custom_prompt
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{image_base64}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                temperature=0.2,
                max_tokens=2000,
                top_p=0.8
            )
            
            analysis = response.choices[0].message.content
            
            print("‚úÖ An√°lise visual conclu√≠da!")
            return analysis
            
        except Exception as e:
            print(f"‚ùå Erro na an√°lise visual: {e}")
            # Fallback para an√°lise sem imagem
            print("üîÑ Tentando an√°lise sem imagem como fallback...")
            return self.analyze_match_with_prompt(custom_prompt)
    
    def save_analysis(self, analysis, original_file_path):
        """Salva an√°lise em arquivo"""
        if not analysis:
            return None
            
        try:
            # Criar nome do arquivo de an√°lise
            original_path = Path(original_file_path)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            analysis_filename = f"analysis_{original_path.stem}_{timestamp}.md"
            analysis_path = original_path.parent / analysis_filename
            
            with open(analysis_path, 'w', encoding='utf-8') as f:
                f.write(f"# An√°lise T√©cnica - {timestamp}\n\n")
                f.write(f"**Arquivo Analisado**: {original_path.name}\n\n")
                f.write("---\n\n")
                f.write(analysis)
            
            print(f"üìÑ An√°lise salva em: {analysis_path.absolute()}")
            return analysis_path
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar an√°lise: {e}")
            return None
    
    def display_analysis(self, analysis):
        """Exibe an√°lise formatada no terminal"""
        print("\n" + "="*80)
        print("üèÜ AN√ÅLISE T√âCNICA ESPECIALIZADA")
        print("="*80)
        print(analysis)
        print("="*80)

def main():
    """Fun√ß√£o principal"""
    if len(sys.argv) != 2:
        print("‚ùå Uso: python agent-assistant.py <caminho_do_json_simplificado>")
        print("üìù Exemplo: python agent-assistant.py live_data_simplify/simplified_match_13963638_20250608_144908.json")
        return
    
    json_file_path = sys.argv[1]
    
    # Verificar se arquivo existe
    if not Path(json_file_path).exists():
        print(f"‚ùå Arquivo n√£o encontrado: {json_file_path}")
        return
    
    # Verificar se √© arquivo simplificado
    if "simplified_" not in Path(json_file_path).name:
        print("‚ö†Ô∏è  AVISO: Este arquivo n√£o parece ser um JSON simplificado.")
        print("üìã Recomendado usar arquivos da pasta 'live_data_simplify/'")
    
    try:
        print(f"üöÄ Iniciando an√°lise t√©cnica de: {json_file_path}")
        print("="*60)
        
        # Inicializar assistente
        assistant = TechnicalAssistant()
        
        # Carregar dados
        match_data = assistant.load_match_data(json_file_path)
        if not match_data:
            return
        
        # Extrair informa√ß√µes b√°sicas
        home_team = match_data.get('match_summary', {}).get('home_team', 'Time Casa')
        away_team = match_data.get('match_summary', {}).get('away_team', 'Time Visitante')
        score = match_data.get('match_summary', {}).get('score', {})
        status = match_data.get('match_summary', {}).get('status', 'Desconhecido')
        
        print(f"‚öΩ {home_team} {score.get('home', 0)} x {score.get('away', 0)} {away_team}")
        print(f"üìä Status: {status}")
        print("="*60)
        
        # Realizar an√°lise
        analysis = assistant.analyze_match(match_data)
        
        if analysis:
            # Exibir an√°lise
            assistant.display_analysis(analysis)
            
            # Salvar an√°lise
            assistant.save_analysis(analysis, json_file_path)
            
            print("\nüéØ AN√ÅLISE CONCLU√çDA!")
            print("üí° Use essas informa√ß√µes para tomar decis√µes t√°ticas informadas.")
        else:
            print("‚ùå Falha na an√°lise t√©cnica")
    
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")

if __name__ == "__main__":
    main()
